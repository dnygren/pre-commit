#!/bin/bash
################################################################################
# pre-commit : git hook to check coding standards before commit
#
# Created by: Dan Nygren
# Email: nygren@msss.com
# Permanent Email: dan.nygren@gmail.com
#
#   To enable this hook, place it in <repository>/.git/hooks/pre-commit .
# This is a git hook script to verify what is about to be committed meets
# coding standards. It is called by "git commit" with no arguments. The hook
# should exit with non-zero status after issuing an appropriate message if it
# wants to stop the commit.
#
# The script checks for:
#   * Non-ASCII character file names
#   (Disable with $ git config hooks.allownonascii true)
#   * Compliance with uncrustify coding standards
#   (Disable with $ git config hooks.allownocodeconventions true)
#   * Line lengths greater than 80 characters
#   (Disable with $ git config hooks.allowovereightychars true)
#   * Tab characters
#   (Disable with $ git config hooks.allowtabchars true)
#   * Trailing whitespace
#   (Disable with $ git config hooks.allowtrailingwhitespace true)
#   * DOS line endings
#   (Disable with $ git config hooks.allowdosnewlines true)
#   * Copyright check
#   (Disable with $ git config hooks.allownocopyright true)
#
# CALLING SEQUENCE      Called by "git commit"
#
# EXAMPLES              git commit
#
# TARGET SYSTEM         git, Linux
#
# DEVELOPMENT SYSTEM    Linux
#
# CALLS                 git, grep, awk, uncrustify, realpath, dirname,
#                       basename, sed
#
# CALLED BY             git
#
# INPUTS                Files being committed by git,
#                       uncrustify .cfg file at "$HOME/uncrustify/mms.cfg"
#                       FILE_EXTS to be checked,
#                       EXEMPT_DIR_NAMES and EXEMPT_FILE_EXTS to not check
#                       COPYRIGHT_HOLDER
#                       Files EXEMPT_FROM_COPYRIGHT not to check for copyright.
#
# OUTPUTS               Information on where code checks failed and how to
#                       resolve them. If uncrustify fails, a passing example is
#                       saved in /tmp so it can be compared to the original with
#                       gvimdiff or just substituted in place of the original.
#
# RETURNS               Non-zero on failure
#
# ERROR HANDLING        Exits with error message
#
# WARNINGS              1) Only .*[Mm]akefile* files may have tab characters.
#                       2) Copyright lines must follow the form:
#                       Copyright (c) FirstYear, CurrentYear, $COPYRIGHT_HOLDER.
#                       with the "(c)" and first year being optional and the
#                       current year and closing period mandatory.
#                       (2. Describe anything a maintainer should be aware of)
#                       (N. Describe anything a maintainer should be aware of)
#
################################################################################

# Don't ignore any directories
#EXEMPT_DIR_NAMES=""
# Directories to ignore
# Ignore old style revision control system "RCS" directories
#EXEMPT_DIR_NAMES="RCS" # This normally should be done with a .gitignore file
# These directories don't follow our coding standards
EXEMPT_DIR_NAMES="MAX MAX_PS Execute GDS_Data GDS_Max"
#EXEMPT_DIR_NAMES="TestCases"

# File types NOT to put through all checks because the 80 char line
# length limit and tab character checks will give false positives.
EXEMPT_FILE_EXTS=".exe .gz .tgz .xz .zip .ico .csv .html .xml .md .cfg .pdf \
.out .log .a"

# File types to perform uncrustify checks on
FILE_EXTS=".c .h .cc .cpp .hpp"

# Set the uncrustify executable.
# UNCRUSTIFY="/usr/bin/uncrustify"
UNCRUSTIFY="$HOME/uncrustify/uncrustify"

# Set the uncrustify config file.
# CONFIG="/home/user/.config/uncrustify.cfg"
CONFIG="$HOME/uncrustify/mms.cfg"

# Set the copyright holder.
# If no copyright check should be performed, leave it undefined.
# Copyright lines must follow the form:
# Copyright (c) FirstYear, CurrentYear, $COPYRIGHT_HOLDER.
# with the "(c)" and first year being optional and the
# current year and closing period mandatory.
# Example #1
# COPYRIGHT_HOLDER="Daniel C. Nygren"
# Example #2
# COPYRIGHT_HOLDER="example.com and/or its affiliates"

# Files exempt from copyright check
EXEMPT_FROM_COPYRIGHT="LICENSE"

# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# ^^^^^^^^^^ Place code that may need modification above this point. ^^^^^^^^^^
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

if git rev-parse --verify HEAD >/dev/null 2>&1
then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=$(git hash-object -t tree /dev/null)
fi

added_modded_files=$(git status --short | grep -E '^(A|M)' | awk '{ print $2 }')
# Use the below if you only want to run pre-commit on the files in the cwd
# added_modded_files=$(ls)

# Redirect output to stderr.
exec 1>&2

##################################################################
# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
    ##################################################################
    # If there are non-ASCII file names, print error message and fail.
    # Note that the use of brackets around a tr range is ok here, (it's
    # even required, for portability to Solaris 10's /usr/bin/tr), since
    # the square bracket bytes happen to fall in the designated range.
    test $(git diff --cached --name-only --diff-filter=A -z $against |
    LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
    cat <<\EOF
ERROR Attempt to add a non-ASCII file name.
This can cause problems if you want to work with people on other platforms.
To be portable it is advisable to rename the file.
If you know what you are doing you can disable this check using:
  git config hooks.allownonascii true
EOF
    exit 1 # Exit failure
fi # allownonascii

##################################################################
# Print directories exempt from all checks.
#
echo "### File in the following directories are exempt from ALL checks: ###"
echo $EXEMPT_DIR_NAMES

##################################################################
# If you want to allow files that don't comply with code conventions,
# set this variable to true.
allownocodeconventions=$(git config --bool hooks.allownocodeconventions)
if [ "$allownocodeconventions" != "true" ]
then

##################################################################
# If files don't comply with code conventions, print them and fail.
#

# grep for added (A) and modified (M) files
# awk is being used here to print $2.
# A complete git status --short line has extra space and extra data
# at the beginning, so we want to remove that.
# awk also performs automatic stripping.
echo "### Attempting to validate the coding conventions. ###"

# Check whether the given file matches any of the set extensions
matches_extension() {
    local filename="$(basename -- "$1")"
    local extension=".${filename##*.}"
    local ext

    for ext in $FILE_EXTS; do [ "$ext" = "$extension" ] && return 0; done
    # return 0 is success (matches)
    return 1
}

# Check whether the given file is under any directories to be ignored
matches_dir() {
    #echo "Full filename = $1"

    local file_directory=$(dirname $1)
    #echo "File Directory = $file_directory"

    local spaced_file_directory=${file_directory//\// }
    #echo "Spaced file directory = $spaced_file_directory"

    local dir
    for dir in $EXEMPT_DIR_NAMES
    do
        for path_portion in $spaced_file_directory
        do
            #echo "If $dir == $path_portion then exit matches_dir() function"
            if [[ "$dir" == "$path_portion" ]]
            then
                #echo -e "Match!\n"
                return 0
            fi
        done
    done
    # return 0 is success (matches)
    #echo -e "No \"$EXEMPT_DIR_NAMES\" in \"$spaced_file_directory\".\n"
    return 1
}

# Check whether the given file is under any directories to be ignored
matches_exempt_from_copyright() {
    #echo "Full filename = $1"

    local filename="$(basename -- "$1")"
    for exemptname in $EXEMPT_FROM_COPYRIGHT
    do
        if [[ "$exemptname" == "$filename" ]]
        then
            #echo -e "Match!\n"
            return 0
        fi
    done
    # return 0 is success (matches)
    #echo -e "No \"$EXEMPT_FROM_COPYRIGHT\" in \"$1\".\n"
    return 1
}

# Make sure the uncrustify config file and executable are correctly set
if [ ! -f "$CONFIG" ] ; then
    printf "Error: uncrustify config file $CONFIG not found.\n"
    printf "Install or set the correct path in "$0".\n"
    exit 1 # Exit failure
fi

if ! command -v "$UNCRUSTIFY" > /dev/null ; then
    printf "Error: uncrustify executable $UNCRUSTIFY not found.\n"
    printf "Install or set the correct path in "$0".\n"
    exit 1 # Exit failure
fi

EXIT_VALUE=0
for file in $added_modded_files; do
    # Check file if its directory does not matches any of the $EXEMPT_DIR_NAMES
    if ! matches_dir "$file" ; then
        # Check file if it matches any of the extensions in $FILE_EXTS
        if matches_extension "$file"; then
            printf "Checking $file because its extension matches $FILE_EXTS\n"
            $UNCRUSTIFY --check -c $CONFIG -f $file
            if [ $? -ne 0 ] ; then
                $UNCRUSTIFY -q -c $CONFIG -f $file > /tmp/`basename $file `
                full_path_to_file=$(/usr/bin/realpath $file)
                echo -n "-> Compare files or copy uncrustified temporary file"
                echo " over the existing file with below commands."
                echo " gvimdiff /tmp/`basename $file` $full_path_to_file"
                echo " cp /tmp/`basename $file` $full_path_to_file"
                EXIT_VALUE=1
            fi
        else
            echo "$file exempt because its extension didn't match $FILE_EXTS"
        fi
    else
        printf "$file exempt because its directory matched $EXEMPT_DIR_NAMES\n"
    fi
done

if [ $EXIT_VALUE -eq 1 ]
then
    echo "Exiting because a $UNCRUSTIFY --check -c $CONFIG -f <file> failed."
    printf "***Remember to \"git add <changed file>\" before trying again.***\n"
    exit 1 # Exit failure
else
    printf "Non-exempt file(s) comply.\n"
fi

fi # allownocodeconventions

##################################################################
# Reuse the matches_extension function using exempt file extensions.
# This time we use it to determine file types NOT to parse.
FILE_EXTS=$EXEMPT_FILE_EXTS
echo "### File extensions exempt from the following checks: ###"
echo $EXEMPT_FILE_EXTS

##################################################################
# If you want to allow lines > 80 set this variable to true.
allowovereightychars=$(git config --bool hooks.allowovereightychars)
if [ "$allowovereightychars" != "true" ]
then

##################################################################
# If there are files with lines > 80 characters, print them and fail.

# grep for added (A) and modified (M) files
# awk is being used here to print $2.
# A complete git status --short line has extra space and extra data
# at the beginning, so we want to remove that.
# awk also performs automatic stripping.
echo "### Attempting to validate the 80 character line length limit. ###"

# Now we can verify each file with a for loop:
EXIT_VALUE=0
for file in $added_modded_files; do
    # Don't check EXEMPT_FILE_EXTS or EXEMPT_DIR_NAMES
    if !(matches_extension "$file") && !(matches_dir "$file"); then
        if grep --line-number --with-filename '.\{81,\}' $file ; then
            # If any files match, exit after checking all files
            EXIT_VALUE=1
        fi
    fi
done

# If any files had a line > 80 characters, exit.
if [ $EXIT_VALUE -eq 1 ]
    then
    echo "Exiting because 80 character line length exceeded."
    printf "***Remember to \"git add <changed file>\" before trying again.***\n"
    exit 1 # Exit failure
else
    printf "Non-exempt file(s) comply.\n"
fi

fi # allowovereightychars

##################################################################

##################################################################
# If there are files (other than a makefile which needs tab
# characters) containing tab characters, print them and fail.
#
# grep for added (A) and modified (M) files
# awk is being used here to print $2.
# A complete git status --short line has extra space and extra data
# at the beginning, so we want to remove that.
# awk also performs automatic stripping.

# If you want to allow tabs, set this variable to true.
allowtabchars=$(git config --bool hooks.allowtabchars)
if [ "$allowtabchars" != "true" ]
then
echo "### Attempting to validate the tab character prohibition. ###"

# Now we can verify each file with a for loop:
EXIT_VALUE=0
for file in $added_modded_files; do
    filebasename="$(basename "$file")"
    # Match GNUmakefile, Makefile, makefile, ...
    if [[ $filebasename =~ .*[Mm]akefile* ]] ; then
        continue
    fi
    # Don't check EXEMPT_FILE_EXTS or EXEMPT_DIR_NAMES
    if !(matches_extension "$file") && !(matches_dir "$file"); then
        if grep --line-number --with-filename -P '\t' $file ; then
        echo "Has a tab" $file
        # If any files match, exit after checking all files
            EXIT_VALUE=1
        fi
    fi
done

# If any files had a tab character, exit.
if [ $EXIT_VALUE -eq 1 ]
then
    echo "Exiting because a file with a tab character was found."
    printf "***Remember to \"git add <changed file>\" before trying again.***\n"
    exit 1 # Exit failure
else
    printf "Non-exempt file(s) comply.\n"
fi

fi # allowtabchars

##################################################################

##################################################################
# If there are whitespace errors, print the offending lines and file names.
#
# This used to be checked for as per the below, but this didn't
# allow avoiding checks of directories that needed to be ignored
# because they were from a contractor that didn't follow the
# coding conventions.
#
#echo "### Validation there is no trailing whitespace. ###"
#exec git diff-index --check --cached $against --

allowtrailingwhitespace=$(git config --bool hooks.allowtrailingwhitespace)
if [ "$allowtrailingwhitespace" != "true" ]
then

echo "### Attempting to validate the trailing whitespace prohibition. ###"

# Now we can verify each file with a for loop:
EXIT_VALUE=0
for file in $added_modded_files; do
    # Don't check EXEMPT_FILE_EXTS or EXEMPT_DIR_NAMES
    if !(matches_extension "$file") && !(matches_dir "$file"); then
        if grep --line-number --with-filename '[[:blank:]]$' $file ; then
        # If any files match, exit after checking all files
            EXIT_VALUE=1
        fi
    fi
done

# If any files had a trailing whitespace character, exit.
if [ $EXIT_VALUE -eq 1 ]
then
    echo "Exiting because a file with trailing whitespace was found."
    printf "***Remember to \"git add <changed file>\" before trying again.***\n"
    exit 1 # Exit failure
else
    printf "Non-exempt file(s) comply.\n"
fi

fi # allowtrailingwhitespace"

##################################################################

##################################################################
# If you want to allow dos newlines, set this variable to true.
allowdosnewlines=$(git config --bool hooks.allowdosnewlines)
if [ "$allowdosnewlines" != "true" ]
then

##################################################################
# If there are dos newlines, print the offending lines and file names.
#
echo "### Attempting to validate the Unix newline requirement. ###"

# Now we can verify each file with a for loop:
EXIT_VALUE=0
for file in $added_modded_files; do
    # Don't check EXEMPT_FILE_EXTS or EXEMPT_DIR_NAMES
    if !(matches_extension "$file") && !(matches_dir "$file"); then
        if grep --line-number --with-filename $'\r' $file ; then
        # If any files match, exit after checking all files
            EXIT_VALUE=1
        fi
    fi
done

# If any files had a DOS newline, exit.
if [ $EXIT_VALUE -eq 1 ]
then
    echo "Exiting because a file with a DOS newline was found."
    printf "***Remember to \"git add <changed file>\" before trying again.***\n"
    exit 1 # Exit failure
else
    printf "Non-exempt file(s) comply.\n"
fi

fi # allowdosnewlines

##################################################################

##################################################################
# If you want to allow dos newlines, set this variable to true.
allownocopyright=$(git config --bool hooks.allownocopyright)
if [ "$allownocopyright" != "true" ]
then

##################################################################
# If files do not contain compliant copyright notices, print the
# offending file names.

echo "### Attempting to validate the copyright line requirement. ###"

# The copyright notice must include the year of first publication. A notice may
# be accepted if the year of publication is presented in the form of the year of
# first publication followed by multiple year dates (e.g. 1981, 1982, 1983).
#
# This sed regex allows for most variants of a copyright notice, including a
# range of comma separated years. The components of the regex are:
#
# Beginning of line and any characters in front of "Copyright" (i.e. comment
# indicators) and exactly one space after.
RE_0="/^.*Copyright\s"
# 1: Optionally a "(c)" string followed by exactly one space.
RE_1="(\(c\))\s?"
# 2: Optional initial year(s) of range and their comma(s) followed by a space.
RE_2="([0-9]+,\s*)*"
# 3: Final (or only) year of range, comma, and at least one space.
RE_3="*([0-9]+,)\s+"
# 4: Copyright holder's name followed by one period and then optionally any
# characters (for closing comment indicators) until the end of line.
RE_4="$COPYRIGHT_HOLDER\..*$"
# 5: sed command to print matching lines.
SED_5="/p"

# Concatenate the sed regular expression components together.
COPYRIGHT_LINE_RE=$RE_0$RE_1$RE_2$RE_3$RE_4$SED_5

EXIT_VALUE=0

# Only perform copyright checks if the COPYRIGHT_HOLDER string is not null.
if [ -n "$COPYRIGHT_HOLDER" ]
then
    CURRENT_YEAR="$(date +%Y)"
    # Now we can verify each file with a for loop:
    for file in $added_modded_files; do
        # Don't check EXEMPT_FILE_EXTS or EXEMPT_DIR_NAMES or files that are
        # EXEMPT_FROM_COPYRIGHT
        if !(matches_extension "$file") && !(matches_dir "$file") &&
        !(matches_exempt_from_copyright "$file"); then
            # -n do not print unless /p flag present, then acts like grep.
            # -r  use extended regular expressions
            matches=$(/bin/sed -nr "$COPYRIGHT_LINE_RE" "$file")
            if [[ -z "$matches" ]]; then
                full_path_to_file=$(/usr/bin/realpath $file)
                echo "$full_path_to_file - Non-existent or non-matching \
copyright line."
                EXIT_VALUE=1
            elif [[ ! $matches =~ ^.*$CURRENT_YEAR.*$ ]]; then
                full_path_to_file=$(/usr/bin/realpath $file)
                echo "$full_path_to_file - Copyright line does not contain \
$CURRENT_YEAR."
                EXIT_VALUE=1
            fi
        fi
    done
    # If any files had a copyright header problem, exit.
    if [ $EXIT_VALUE -eq 1 ]
    then
        echo "Exiting because a file had a copyright line error."
        echo "Copyright lines must follow the form:"
        echo "Copyright (c) FirstYear, $CURRENT_YEAR, $COPYRIGHT_HOLDER."
        printf "***Remember to \"git add <changed file>\" before trying \
again.***\n"
        exit 1 # Exit failure
    else
        printf "Non-exempt file(s) comply.\n"
    fi
else
    printf "Copyright header checks were not performed because the \
COPYRIGHT_HOLDER is undefined.\n"
fi

fi # allownocopyright

##################################################################
